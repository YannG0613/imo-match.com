import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, date, timedelta
import plotly.express as px
import plotly.graph_objects as go
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.preprocessing import StandardScaler
import json
import hashlib
import requests
import folium
from streamlit_folium import folium_static
import time

# Configuration de la page
st.set_page_config(
    page_title="imoMatch - Un Demandeur, Un Logement, Une Vente",
    page_icon="üè†",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personnalis√© avanc√©
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 15px;
        margin-bottom: 2rem;
        box-shadow: 0 10px 30px rgba(0,0,0,0.2);
    }
    .main-header h1 {
        color: white;
        text-align: center;
        margin: 0;
        font-size: 2.5em;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    }
    .main-header p {
        color: white;
        text-align: center;
        margin: 0.5rem 0 0 0;
        font-size: 1.3em;
    }
    .metric-card {
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        padding: 1.5rem;
        border-radius: 12px;
        border-left: 5px solid #667eea;
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        margin: 1rem 0;
    }
    .recommendation-card {
        background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%);
        padding: 1.5rem;
        border-radius: 12px;
        border: 1px solid #f0a500;
        margin: 0.8rem 0;
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }
    .property-card {
        background: white;
        padding: 1.5rem;
        border-radius: 12px;
        border: 1px solid #e0e0e0;
        margin: 1rem 0;
        box-shadow: 0 8px 25px rgba(0,0,0,0.15);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    .property-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 12px 35px rgba(0,0,0,0.2);
    }
    .ai-chat {
        background: linear-gradient(135deg, #e3ffe7 0%, #d9e7ff 100%);
        padding: 1rem;
        border-radius: 10px;
        margin: 0.5rem 0;
    }
    .notification {
        background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%);
        padding: 1rem;
        border-radius: 10px;
        margin: 0.5rem 0;
        border-left: 4px solid #ff6b6b;
    }
    .stButton > button {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 0.7rem 1.5rem;
        font-weight: bold;
        transition: transform 0.2s ease;
    }
    .stButton > button:hover {
        transform: scale(1.05);
    }
    .premium-badge {
        background: linear-gradient(45deg, #f093fb 0%, #f5576c 100%);
        color: white;
        padding: 0.3rem 0.8rem;
        border-radius: 20px;
        font-size: 0.8em;
        font-weight: bold;
    }
    .match-score {
        font-size: 2em;
        font-weight: bold;
        text-align: center;
    }
    .match-excellent { color: #28a745; }
    .match-good { color: #ffc107; }
    .match-average { color: #fd7e14; }
    .match-poor { color: #dc3545; }
</style>
""", unsafe_allow_html=True)

# Classe pour l'authentification (version simplifi√©e sans DB)
class AuthManager:
    @staticmethod
    def hash_password(password):
        """Hasher un mot de passe"""
        return hashlib.sha256(password.encode()).hexdigest()
    
    @staticmethod
    def verify_password(password, hashed):
        """V√©rifier un mot de passe"""
        return AuthManager.hash_password(password) == hashed

# Classe pour les services g√©ographiques
class GeoService:
    @staticmethod
    def get_coordinates(address):
        """Obtenir les coordonn√©es d'une adresse"""
        coordinates_db = {
            "paris": {"lat": 48.8566, "lon": 2.3522},
            "lyon": {"lat": 45.7640, "lon": 4.8357},
            "marseille": {"lat": 43.2965, "lon": 5.3698},
            "toulouse": {"lat": 43.6043, "lon": 1.4437},
            "nice": {"lat": 43.7102, "lon": 7.2620},
            "bordeaux": {"lat": 44.8378, "lon": -0.5792}
        }
        
        city = address.lower().split(',')[0].strip()
        return coordinates_db.get(city, {"lat": 48.8566, "lon": 2.3522})
    
    @staticmethod
    def create_map(properties):
        """Cr√©er une carte avec les propri√©t√©s"""
        m = folium.Map(location=[48.8566, 2.3522], zoom_start=6)
        
        for prop in properties:
            coords = GeoService.get_coordinates(prop.get('ville', 'Paris'))
            
            color_map = {
                'Appartement': 'blue',
                'Maison': 'green',
                'Studio': 'orange',
                'Loft': 'purple'
            }
            
            folium.Marker(
                [coords['lat'], coords['lon']],
                popup=f"""
                <b>{prop.get('type', 'Bien')}</b><br>
                {prop.get('ville', '')}<br>
                {prop.get('surface', 0)}m¬≤ - {prop.get('pieces', 0)} pi√®ces<br>
                <b>{prop.get('prix', 0):,}‚Ç¨</b>
                """,
                icon=folium.Icon(color=color_map.get(prop.get('type'), 'blue'))
            ).add_to(m)
        
        return m

# Classe pour l'intelligence artificielle
class AIService:
    @staticmethod
    def calculate_compatibility_score(profile, property_data):
        """Calculer un score de compatibilit√© avanc√©"""
        score = 0
        factors = []
        
        # Budget compatibility (30 points)
        budget_max = profile.get('budget_max', float('inf'))
        prix = property_data.get('prix', 0)
        if prix <= budget_max:
            budget_score = 30 * (1 - (prix / budget_max) * 0.5)
            score += budget_score
            factors.append(f"Budget: {budget_score:.1f}/30")
        
        # Surface compatibility (25 points)
        surface_souhaitee = profile.get('surface_souhaitee', 70)
        surface = property_data.get('surface', 0)
        if surface_souhaitee > 0:
            surface_diff = abs(surface - surface_souhaitee) / surface_souhaitee
            if surface_diff <= 0.3:
                surface_score = 25 * (1 - surface_diff)
                score += surface_score
                factors.append(f"Surface: {surface_score:.1f}/25")
        
        # Location preference (25 points)
        villes_souhaitees = [v.lower() for v in profile.get('villes_souhaitees', [])]
        ville = property_data.get('ville', '').lower()
        if ville in villes_souhaitees:
            score += 25
            factors.append("Localisation: 25/25")
        
        # Type preference (20 points)
        type_souhaite = profile.get('type_bien', '').lower()
        type_bien = property_data.get('type', '').lower()
        if type_souhaite == type_bien:
            score += 20
            factors.append("Type: 20/20")
        
        return min(score, 100), factors
    
    @staticmethod
    def generate_ai_response(user_message, user_profile=None):
        """G√©n√©rer une r√©ponse d'IA contextuelle"""
        responses = {
            "budget": [
                "D'apr√®s votre budget, je peux vous proposer des biens dans cette gamme. Avez-vous des pr√©f√©rences de quartier ?",
                "Votre budget nous ouvre plusieurs possibilit√©s int√©ressantes. Souhaitez-vous des biens r√©cents ou avec du caract√®re ?"
            ],
            "quartier": [
                "Excellent choix de quartier ! Je connais bien cette zone. Quels sont vos crit√®res de transport ?",
                "Ce quartier offre de belles opportunit√©s. Pr√©f√©rez-vous √™tre proche des commerces ou dans un environnement plus calme ?"
            ],
            "famille": [
                "Avec des enfants, je recommande de regarder la proximit√© des √©coles. Avez-vous des √©tablissements pr√©f√©r√©s ?",
                "Pour une famille, l'espace ext√©rieur est important. Un balcon ou une terrasse vous int√©resse ?"
            ],
            "default": [
                "Interessant ! Pouvez-vous me donner plus de d√©tails pour affiner ma recherche ?",
                "Je note cette information. Qu'est-ce qui est le plus important pour vous dans ce logement ?",
                "Parfait ! Cela m'aide √† mieux comprendre vos besoins. Avez-vous d'autres crit√®res ?"
            ]
        }
        
        message_lower = user_message.lower()
        
        if any(word in message_lower for word in ['budget', 'prix', 'co√ªt', 'euro']):
            category = "budget"
        elif any(word in message_lower for word in ['quartier', 'zone', 'arrondissement', 'ville']):
            category = "quartier"
        elif any(word in message_lower for word in ['enfant', 'famille', '√©cole']):
            category = "famille"
        else:
            category = "default"
        
        return np.random.choice(responses[category])

# Initialisation des services
@st.cache_resource
def init_services():
    auth = AuthManager()
    geo = GeoService()
    ai = AIService()
    return auth, geo, ai

auth, geo, ai = init_services()

# Initialisation du state avec donn√©es en m√©moire
if 'user' not in st.session_state:
    st.session_state.user = None
if 'users_db' not in st.session_state:
    st.session_state.users_db = {}
if 'profiles_db' not in st.session_state:
    st.session_state.profiles_db = {}
if 'properties_db' not in st.session_state:
    # Donn√©es de d√©monstration
    st.session_state.properties_db = {
        "prop_1": {
            "id": "prop_1",
            "titre": "Magnifique 3P - Bastille",
            "type": "Appartement",
            "surface": 75,
            "pieces": 3,
            "prix": 485000,
            "ville": "Paris",
            "quartier": "Bastille",
            "description": "Appartement lumineux avec parquet ancien, 2 chambres, cuisine √©quip√©e, proche m√©tro.",
            "caracteristiques": ["Balcon", "Cave", "Interphone"],
            "photos": ["https://via.placeholder.com/300x200/4287f5/ffffff?text=Photo+1"],
            "agent": "Marie Dubois - Century 21"
        },
        "prop_2": {
            "id": "prop_2",
            "titre": "Maison familiale - Vincennes",
            "type": "Maison",
            "surface": 120,
            "pieces": 5,
            "prix": 680000,
            "ville": "Vincennes",
            "quartier": "Centre",
            "description": "Belle maison avec jardin, 4 chambres, garage, dans quartier calme et r√©sidentiel.",
            "caracteristiques": ["Jardin", "Garage", "Chemin√©e"],
            "photos": ["https://via.placeholder.com/300x200/28a745/ffffff?text=Photo+2"],
            "agent": "Pierre Martin - Orpi"
        },
        "prop_3": {
            "id": "prop_3",
            "titre": "Loft d'artiste - R√©publique",
            "type": "Loft",
            "surface": 85,
            "pieces": 2,
            "prix": 520000,
            "ville": "Paris",
            "quartier": "R√©publique",
            "description": "Ancien atelier d'artiste r√©nov√©, volumes exceptionnels, tr√®s lumineux.",
            "caracteristiques": ["Hauteur 4m", "Verri√®re", "Terrasse"],
            "photos": ["https://via.placeholder.com/300x200/fd7e14/ffffff?text=Photo+3"],
            "agent": "Sophie Leroy - Ind√©pendant"
        }
    }
if 'notifications' not in st.session_state:
    st.session_state.notifications = []
if 'ai_messages' not in st.session_state:
    st.session_state.ai_messages = []

# Header principal avec info utilisateur
col1, col2, col3 = st.columns([2, 1, 1])

with col1:
    st.markdown("""
    <div class="main-header">
        <h1>üè† imoMatch</h1>
        <p>Un Demandeur, Un Logement, Une Vente</p>
    </div>
    """, unsafe_allow_html=True)

with col2:
    if st.session_state.user:
        st.success(f"üë§ Connect√©")
        if st.button("üîî Notifications", key="notif_btn"):
            if st.session_state.notifications:
                for notif in st.session_state.notifications:
                    st.info(f"üìß {notif}")
            else:
                st.info("Aucune nouvelle notification")

with col3:
    if st.session_state.user:
        if st.button("üö™ D√©connexion", key="logout"):
            st.session_state.user = None
            st.rerun()

# Sidebar pour navigation et authentification
with st.sidebar:
    st.image("https://via.placeholder.com/200x80/667eea/FFFFFF?text=imoMatch", width=200)
    
    if st.session_state.user is None:
        # Interface d'authentification
        auth_tab1, auth_tab2 = st.tabs(["üîê Connexion", "üìù Inscription"])
        
        with auth_tab1:
            with st.form("login_form"):
                email = st.text_input("üìß Email")
                password = st.text_input("üîí Mot de passe", type="password")
                
                if st.form_submit_button("Se connecter", use_container_width=True):
                    if email in st.session_state.users_db:
                        stored_hash = st.session_state.users_db[email]['password_hash']
                        if auth.verify_password(password, stored_hash):
                            st.session_state.user = {
                                'email': email,
                                'user_type': st.session_state.users_db[email]['user_type']
                            }
                            st.success("‚úÖ Connexion r√©ussie !")
                            time.sleep(1)
                            st.rerun()
                        else:
                            st.error("‚ùå Mot de passe incorrect")
                    else:
                        st.error("‚ùå Email non trouv√©")
        
        with auth_tab2:
            with st.form("register_form"):
                reg_email = st.text_input("üìß Email")
                reg_password = st.text_input("üîí Mot de passe", type="password")
                reg_password_confirm = st.text_input("üîí Confirmer le mot de passe", type="password")
                user_type = st.selectbox(
                    "üë§ Type de compte",
                    ["Acqu√©reur/Locataire", "Propri√©taire/Bailleur", "Professionnel Immobilier"]
                )
                
                if st.form_submit_button("Cr√©er un compte", use_container_width=True):
                    if reg_password != reg_password_confirm:
                        st.error("‚ùå Les mots de passe ne correspondent pas")
                    elif len(reg_password) < 6:
                        st.error("‚ùå Le mot de passe doit contenir au moins 6 caract√®res")
                    elif reg_email in st.session_state.users_db:
                        st.error("‚ùå Cette adresse email est d√©j√† utilis√©e")
                    else:
                        st.session_state.users_db[reg_email] = {
                            'password_hash': auth.hash_password(reg_password),
                            'user_type': user_type,
                            'created_at': datetime.now().isoformat()
                        }
                        st.success("‚úÖ Compte cr√©√© avec succ√®s !")
                        st.session_state.notifications.append("üéâ Bienvenue sur imoMatch !")
                        time.sleep(1)
                        st.rerun()
    
    else:
        # Navigation pour utilisateur connect√©
        st.success(f"üë§ {st.session_state.user['user_type']}")
        
        # Affichage des notifications
        if st.session_state.notifications:
            st.subheader("üîî Notifications")
            for i, notif in enumerate(st.session_state.notifications[:3]):
                st.markdown(f"""
                <div class="notification">
                    <small>{notif}</small>
                </div>
                """, unsafe_allow_html=True)
            
            if st.button("Marquer comme lues"):
                st.session_state.notifications = []
                st.rerun()
        
        st.divider()
        
        # Menu de navigation
        pages = {
            "üè† Dashboard": "dashboard",
            "üë§ Mon Profil": "profile",
            "üéØ Recommandations": "recommendations", 
            "üîç Recherche Avanc√©e": "search",
            "üó∫Ô∏è Carte Interactive": "map",
            "ü§ñ Agent IA": "ai_agent",
            "üìä Analytics": "analytics",
            "üí∞ Services Premium": "premium",
            "üè¢ Marketplace": "marketplace",
            "üìπ Visites Virtuelles": "virtual_tours"
        }
        
        selected_page = st.selectbox("Navigation", list(pages.keys()))
        page = pages[selected_page]

# Pages de contenu principal
if st.session_state.user is None:
    # Page d'accueil pour non-connect√©s
    st.markdown("""
    ## üéØ La r√©volution de l'immobilier par l'Intelligence Artificielle
    
    ### ‚ú® Pourquoi choisir imoMatch ?
    """)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        <div class="metric-card">
            <h3>üîç Matching IA</h3>
            <p>Notre algorithme analyse plus de 50 crit√®res pour vous proposer les biens parfaits</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="metric-card">
            <h3>‚ö° Gain de temps</h3>
            <p>R√©duisez votre temps de recherche de 70% gr√¢ce √† nos recommandations cibl√©es</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div class="metric-card">
            <h3>üíº Services int√©gr√©s</h3>
            <p>Notaires, banques, assurances... tout l'√©cosyst√®me immobilier en un clic</p>
        </div>
        """, unsafe_allow_html=True)
    
    # D√©monstration interactive
    st.subheader("üé¨ D√©monstration en direct")
    
    demo_col1, demo_col2 = st.columns([1, 1])
    
    with demo_col1:
        st.markdown("### üìù Simulez votre profil")
        
        sim_budget = st.slider("Budget maximum (k‚Ç¨)", 100, 1000, 400)
        sim_surface = st.slider("Surface souhait√©e (m¬≤)", 30, 200, 80)
        sim_ville = st.selectbox("Ville pr√©f√©r√©e", ["Paris", "Lyon", "Marseille", "Toulouse"])
        sim_type = st.selectbox("Type de bien", ["Appartement", "Maison", "Studio"])
        
        if st.button("üéØ Voir les matches", use_container_width=True):
            # Simulation de r√©sultats
            st.success("‚úÖ 12 biens trouv√©s avec 89% de compatibilit√© moyenne !")
    
    with demo_col2:
        st.markdown("### üìä R√©sultats en temps r√©el")
        
        # Graphique de d√©monstration
        demo_data = pd.DataFrame({
            'Bien': ['Apt. Bastille', 'Maison Vincennes', 'Loft Marais'],
            'Score': [95, 87, 76],
            'Prix': [450, 680, 520]
        })
        
        fig = px.bar(demo_data, x='Bien', y='Score', title='Scores de compatibilit√©')
        fig.update_layout(showlegend=False)
        st.plotly_chart(fig, use_container_width=True)

elif page == "dashboard":
    st.header("üè† Dashboard Personnel")
    
    # M√©triques personnalis√©es
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üëÅÔ∏è Profil vues", "127", "12%")
    with col2:
        st.metric("üéØ Matches re√ßus", "23", "5")
    with col3:
        st.metric("üìß Messages", "8", "3")
    with col4:
        st.metric("‚≠ê Score profil", "85%", "2%")
    
    # Activit√© r√©cente
    st.subheader("üìà Activit√© r√©cente")
    
    # Graphiques d'activit√©
    col1, col2 = st.columns(2)
    
    with col1:
        # √âvolution des vues
        dates = pd.date_range('2024-09-01', periods=20, freq='D')
        views = np.random.poisson(8, 20).cumsum()
        
        fig = px.line(x=dates, y=views, title='üìä √âvolution des vues de profil')
        fig.update_traces(line_color='#667eea')
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # R√©partition des matches par score
        scores_data = pd.DataFrame({
            'Score': ['90-100%', '80-89%', '70-79%', '60-69%'],
            'Nombre': [5, 8, 7, 3]
        })
        
        fig = px.pie(scores_data, values='Nombre', names='Score', 
                    title='üéØ R√©partition des scores de match')
        st.plotly_chart(fig, use_container_width=True)
    
    # Recommandations rapides
    st.subheader("‚ö° Recommandations express")
    
    quick_recs = [
        {"titre": "Appartement 3P - Belleville", "prix": "425k‚Ç¨", "score": 92},
        {"titre": "Maison 4P - Vincennes", "prix": "680k‚Ç¨", "score": 88},
        {"titre": "Loft 2P - R√©publique", "prix": "520k‚Ç¨", "score": 85}
    ]
    
    for rec in quick_recs:
        col1, col2, col3, col4 = st.columns([3, 1, 1, 1])
        with col1:
            st.write(f"**{rec['titre']}**")
        with col2:
            st.write(rec['prix'])
        with col3:
            st.write(f"üéØ {rec['score']}%")
        with col4:
            if st.button("Voir", key=f"quick_{rec['score']}"):
                st.info("D√©tails du bien...")

elif page == "profile":
    st.header("üë§ Mon Profil Complet")
    
    # Profil selon le type d'utilisateur
    if st.session_state.user['user_type'] == "Acqu√©reur/Locataire":
        
        profile_tab1, profile_tab2, profile_tab3 = st.tabs(["üìã Informations", "üéØ Crit√®res", "üîí S√©curit√©"])
        
        with profile_tab1:
            with st.form("profile_info"):
                st.subheader("Informations personnelles")
                
                col1, col2 = st.columns(2)
                with col1:
                    nom = st.text_input("üë§ Nom complet")
                    telephone = st.text_input("üì± T√©l√©phone")
                    age = st.number_input("üéÇ √Çge", min_value=18, max_value=100, value=30)
                    profession = st.text_input("üíº Profession")
                    
                with col2:
                    situation = st.selectbox("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Situation familiale", 
                                           ["C√©libataire", "En couple", "Mari√©(e)", "Divorc√©(e)"])
                    revenus = st.number_input("üí∞ Revenus mensuels nets (‚Ç¨)", min_value=0, value=3000)
                    enfants = st.number_input("üë∂ Nombre d'enfants", min_value=0, value=0)
                    animaux = st.checkbox("üêï Animaux de compagnie")
                
                if st.form_submit_button("üíæ Sauvegarder", use_container_width=True):
                    profile_data = {
                        "nom": nom,
                        "telephone": telephone,
                        "age": age,
                        "profession": profession,
                        "situation": situation,
                        "revenus": revenus,
                        "enfants": enfants,
                        "animaux": animaux
                    }
                    
                    # Sauvegarder en m√©moire
                    st.session_state.profiles_db[st.session_state.user['email']] = profile_data
                    
                    st.success("‚úÖ Profil mis √† jour avec succ√®s !")
                    st.session_state.notifications.append("üìù Profil mis √† jour - Votre score de matching va s'am√©liorer !")
        
        with profile_tab2:
            with st.form("search_criteria"):
                st.subheader("üéØ Crit√®res de recherche avanc√©s")
                
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    transaction_type = st.selectbox("üìã Type de transaction", ["Achat", "Location", "Achat/Location"])
                    budget_min = st.number_input("üí∞ Budget minimum (‚Ç¨)", min_value=0, value=200000)
                    budget_max = st.number_input("üí∞ Budget maximum (‚Ç¨)", min_value=0, value=500000)
                    surface_min = st.number_input("üìè Surface minimum (m¬≤)", min_value=10, value=60)
                    
                with col2:
                    pieces_min = st.number_input("üè† Pi√®ces minimum", min_value=1, value=2)
                    pieces_max = st.number_input("üè† Pi√®ces maximum", min_value=1, value=5)
                    type_bien = st.multiselect("üè¢ Types de biens", 
                                             ["Appartement", "Maison", "Studio", "Loft", "Duplex", "Penthouse"])
                    etage_pref = st.selectbox("üèóÔ∏è Pr√©f√©rence d'√©tage", 
                                            ["Rez-de-chauss√©e", "√âtages bas (1-3)", "√âtages moyens (4-6)", "√âtages hauts (7+)", "Dernier √©tage"])
                
                with col3:
                    villes = st.multiselect("üåÜ Villes souhait√©es", 
                                          ["Paris", "Lyon", "Marseille", "Toulouse", "Nice", "Bordeaux", "Strasbourg", "Montpellier"])
                    arrondissements = st.text_area("üìç Arrondissements/Quartiers pr√©f√©r√©s", 
                                                 placeholder="Ex: 15e, 16e, Belleville...")
                    transport_max = st.number_input("üöá Distance max transport (min)", min_value=1, value=15)
                
                st.subheader("üè† Caract√©ristiques souhait√©es")
                
                col4, col5 = st.columns(2)
                
                with col4:
                    balcon = st.checkbox("üåø Balcon/Terrasse/Jardin")
                    parking = st.checkbox("üöó Parking/Garage")
                    ascenseur = st.checkbox("üõó Ascenseur")
                    cave = st.checkbox("üè† Cave/Cellier")
                    
                with col5:
                    luminosite = st.selectbox("‚òÄÔ∏è Luminosit√©", ["Peu importante", "Importante", "Tr√®s importante"])
                    calme = st.selectbox("üîá Environnement calme", ["Peu important", "Important", "Tr√®s important"])
                    vue = st.selectbox("üåÖ Vue", ["Peu importante", "Sur cour", "D√©gag√©e", "Exceptionnelle"])
                    etat = st.selectbox("üîß √âtat du bien", ["√Ä r√©nover", "Bon √©tat", "Tr√®s bon √©tat", "Neuf/R√©cent"])
                
                if st.form_submit_button("üéØ Sauvegarder les crit√®res", use_container_width=True):
                    criteria = {
                        "transaction_type": transaction_type,
                        "budget_min": budget_min,
                        "budget_max": budget_max,
                        "surface_min": surface_min,
                        "pieces_min": pieces_min,
                        "pieces_max": pieces_max,
                        "type_bien": type_bien,
                        "villes": villes,
                        "balcon": balcon,
                        "parking": parking,
                        "ascenseur": ascenseur
                    }
                    
                    # Sauvegarde des crit√®res
                    criteria_key = f"{st.session_state.user['email']}_criteria"
                    st.session_state.profiles_db[criteria_key] = criteria
                    
                    st.success("üéØ Crit√®res de recherche sauvegard√©s !")
        
        with profile_tab3:
            st.subheader("üîí Param√®tres de s√©curit√© et confidentialit√©")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("### üîê Mot de passe")
                with st.form("change_password"):
                    current_password = st.text_input("Mot de passe actuel", type="password")
                    new_password = st.text_input("Nouveau mot de passe", type="password")
                    confirm_password = st.text_input("Confirmer le nouveau mot de passe", type="password")
                    
                    if st.form_submit_button("Changer le mot de passe"):
                        if new_password == confirm_password and len(new_password) >= 6:
                            st.session_state.users_db[st.session_state.user['email']]['password_hash'] = auth.hash_password(new_password)
                            st.success("‚úÖ Mot de passe mis √† jour !")
                        else:
                            st.error("‚ùå Erreur dans la modification du mot de passe")
            
            with col2:
                st.markdown("### üëÅÔ∏è Confidentialit√©")
                
                public_profile = st.checkbox("Profil public", help="Visible par les professionnels")
                contact_direct = st.checkbox("Contact direct autoris√©", help="Les propri√©taires peuvent vous contacter")
                notifications_email = st.checkbox("Notifications par email", value=True)
                newsletters = st.checkbox("Newsletter et actualit√©s")
                
                if st.button("üíæ Sauvegarder les pr√©f√©rences"):
                    st.success("‚úÖ Pr√©f√©rences de confidentialit√© mises √† jour !")

elif page == "recommendations":
    st.header("üéØ Recommandations Personnalis√©es")
    
    # Syst√®me de recommandations avanc√©
    col1, col2 = st.columns([3, 1])
    
    with col2:
        st.subheader("üîß Filtres")
        score_min = st.slider("Score minimum", 0, 100, 70)
        prix_max = st.number_input("Prix maximum (k‚Ç¨)", min_value=100, value=600)
        trier_par = st.selectbox("Trier par", ["Score de match", "Prix croissant", "Prix d√©croissant", "Date d'ajout"])
        
        if st.button("üîÑ Actualiser"):
            st.rerun()
    
    with col1:
        # Propri√©t√©s recommand√©es avec IA
        fake_profile = {
            "budget_max": prix_max * 1000,
            "surface_souhaitee": 80,
            "type_bien": "appartement",
            "villes_souhaitees": ["paris", "vincennes"]
        }
        
        properties_list = list(st.session_state.properties_db.values())
        
        for prop in properties_list:
            score, factors = ai.calculate_compatibility_score(fake_profile, prop)
            
            if score >= score_min:
                # Carte de propri√©t√© avec design am√©lior√©
                st.markdown(f"""
                <div class="property-card">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
                        <h3 style="margin: 0; color: #667eea;">{prop['titre']}</h3>
                        <div class="match-score match-{'excellent' if score >= 80 else 'good' if score >= 60 else 'average'}">
                            {score:.0f}%
                        </div>
                    </div>
                </div>
                """, unsafe_allow_html=True)
                
                col_info, col_photo, col_actions = st.columns([2, 1, 1])
                
                with col_info:
                    st.write(f"**{prop['type']} ‚Ä¢ {prop['surface']}m¬≤ ‚Ä¢ {prop['pieces']} pi√®ces**")
                    st.write(f"üìç {prop['ville']} - {prop['quartier']}")
                    st.write(f"üí∞ **{prop['prix']:,}‚Ç¨**")
                    st.write(prop['description'])
                    
                    # Caract√©ristiques
                    carac_str = " ‚Ä¢ ".join(prop['caracteristiques'])
                    st.write(f"‚ú® {carac_str}")
                    
                    st.write(f"üë§ **Agent:** {prop['agent']}")
                
                with col_photo:
                    st.image(prop['photos'][0], use_column_width=True)
                
                with col_actions:
                    st.metric("üéØ Match", f"{score:.0f}%")
                    
                    if st.button(f"üìß Contacter", key=f"contact_{prop['id']}"):
                        st.success("‚úÖ Demande de contact envoy√©e !")
                        st.session_state.notifications.append(f"üìß Contact envoy√© pour {prop['titre']}")
                    
                    if st.button(f"‚ù§Ô∏è Favoris", key=f"fav_{prop['id']}"):
                        st.info("üíñ Ajout√© aux favoris !")
                    
                    if st.button(f"üîó Partager", key=f"share_{prop['id']}"):
                        st.info("üì§ Lien copi√© !")
                
                # D√©tails du matching
                with st.expander(f"üîç D√©tails du matching pour {prop['titre']}"):
                    col_factors, col_chart = st.columns([1, 1])
                    
                    with col_factors:
                        st.write("**Facteurs de compatibilit√©:**")
                        for factor in factors:
                            st.write(f"‚Ä¢ {factor}")
                    
                    with col_chart:
                        # Mini graphique radar du matching
                        categories = ['Budget', 'Surface', 'Localisation', 'Type']
                        values = [85, 92, 100, 80] if score > 80 else [70, 65, 85, 75]
                        
                        fig = go.Figure()
                        fig.add_trace(go.Scatterpolar(
                            r=values,
                            theta=categories,
                            fill='toself',
                            name=f'Compatibilit√©'
                        ))
                        fig.update_layout(
                            polar=dict(
                                radialaxis=dict(visible=True, range=[0, 100])
                            ),
                            showlegend=False,
                            height=250
                        )
                        st.plotly_chart(fig, use_container_width=True)
                
                st.divider()

elif page == "search":
    st.header("üîç Recherche Avanc√©e Multi-Crit√®res")
    
    # Interface de recherche sophistiqu√©e
    search_col1, search_col2, search_col3 = st.columns([1, 1, 1])
    
    with search_col1:
        st.subheader("üí∞ Budget & Surface")
        budget_range = st.slider("Budget (k‚Ç¨)", 100, 1500, (300, 700))
        surface_range = st.slider("Surface (m¬≤)", 20, 300, (60, 120))
        pieces_range = st.slider("Nombre de pi√®ces", 1, 10, (2, 5))
    
    with search_col2:
        st.subheader("üìç Localisation")
        search_villes = st.multiselect("Villes", 
                                     ["Paris", "Lyon", "Marseille", "Toulouse", "Nice", "Bordeaux", "Strasbourg"])
        search_quartiers = st.text_input("Quartiers sp√©cifiques")
        transport_distance = st.number_input("Distance max transport (min)", 1, 60, 15)
    
    with search_col3:
        st.subheader("üè† Caract√©ristiques")
        search_types = st.multiselect("Types de biens", 
                                    ["Appartement", "Maison", "Studio", "Loft", "Duplex"])
        search_options = st.multiselect("Options", 
                                      ["Balcon/Terrasse", "Parking", "Ascenseur", "Cave", "Jardin"])
        search_etat = st.selectbox("√âtat", ["Tous", "Neuf", "Bon √©tat", "√Ä r√©nover"])
    
    # Recherche avec IA
    if st.button("üéØ Lancer la recherche IA", use_container_width=True):
        with st.spinner("üîÆ L'IA analyse le march√©..."):
            time.sleep(2)
            
            # Simulation de r√©sultats de recherche
            nb_results = np.random.randint(15, 45)
            st.success(f"‚úÖ {nb_results} biens trouv√©s correspondant √† vos crit√®res !")
            
            # Graphique de r√©partition des r√©sultats
            col1, col2 = st.columns(2)
            
            with col1:
                # R√©partition par prix
                prix_data = pd.DataFrame({
                    'Tranche': ['300-400k', '400-500k', '500-600k', '600-700k'],
                    'Nombre': [8, 12, 15, 9]
                })
                fig = px.bar(prix_data, x='Tranche', y='Nombre', title='R√©partition par tranche de prix')
                st.plotly_chart(fig, use_container_width=True)
            
            with col2:
                # R√©partition g√©ographique
                geo_data = pd.DataFrame({
                    'Ville': ['Paris', 'Lyon', 'Marseille'],
                    'Nombre': [20, 15, 9]
                })
                fig = px.pie(geo_data, values='Nombre', names='Ville', title='R√©partition g√©ographique')
                st.plotly_chart(fig, use_container_width=True)

elif page == "map":
    st.header("üó∫Ô∏è Carte Interactive des Biens")
    
    # Contr√¥les de la carte
    map_col1, map_col2 = st.columns([3, 1])
    
    with map_col2:
        st.subheader("üéõÔ∏è Contr√¥les")
        
        map_budget_max = st.slider("Budget max (k‚Ç¨)", 200, 1000, 600)
        map_types = st.multiselect("Types", ["Appartement", "Maison", "Studio", "Loft"], default=["Appartement"])
        map_ville = st.selectbox("Centrer sur", ["Paris", "Lyon", "Marseille", "Toulouse"])
        
        show_transport = st.checkbox("üöá Stations de transport", value=True)
        show_ecoles = st.checkbox("üè´ √âcoles", value=False)
        show_commerces = st.checkbox("üè™ Commerces", value=False)
    
    with map_col1:
        # Filtrer les propri√©t√©s selon les crit√®res
        filtered_props = []
        for prop in st.session_state.properties_db.values():
            if (prop['type'] in map_types and 
                prop['prix'] <= map_budget_max * 1000):
                filtered_props.append(prop)
        
        if filtered_props:
            interactive_map = geo.create_map(filtered_props)
            folium_static(interactive_map, width=700, height=500)
        else:
            st.warning("Aucun bien ne correspond √† vos filtres.")
        
        # Statistiques de la carte
        st.subheader("üìä Statistiques de zone")
        
        stats_col1, stats_col2, stats_col3 = st.columns(3)
        
        with stats_col1:
            st.metric("Prix m√©dian/m¬≤", "8,450‚Ç¨", "2.1%")
        with stats_col2:
            st.metric("Temps de vente moyen", "45 jours", "-12%")
        with stats_col3:
            st.metric("Biens disponibles", len(filtered_props), "+8")

elif page == "ai_agent":
    st.header("ü§ñ Agent IA - Assistant Personnel Immobilier")
    
    # Interface de chat avanc√©e
    chat_col1, chat_col2 = st.columns([3, 1])
    
    with chat_col2:
        st.subheader("üéØ Actions rapides")
        
        if st.button("üîç Analyser le march√©", use_container_width=True):
            st.session_state.ai_messages.append({
                "role": "assistant", 
                "content": "üìä D'apr√®s mon analyse, le march√© est dynamique avec une hausse de 3.2% des prix. Je recommande de regarder les secteurs en d√©veloppement comme Belleville ou R√©publique."
            })
            st.rerun()
        
        if st.button("üí° Conseils personnalis√©s", use_container_width=True):
            st.session_state.ai_messages.append({
                "role": "assistant", 
                "content": "üí° Bas√© sur votre profil, je sugg√®re d'√©largir votre recherche aux villes limitrophes. Vous pourriez gagner 20% sur le prix au m¬≤ !"
            })
            st.rerun()
        
        if st.button("üìà Pr√©dictions prix", use_container_width=True):
            st.session_state.ai_messages.append({
                "role": "assistant", 
                "content": "üìà Mes mod√®les pr√©disent une stabilisation des prix dans les 6 prochains mois. C'est le moment id√©al pour n√©gocier !"
            })
            st.rerun()
        
        st.divider()
        st.subheader("üìä Score IA")
        st.metric("Compatibilit√© profil", "87%", "2%")
        st.metric("Probabilit√© d'achat", "72%", "5%")
        
    with chat_col1:
        # Historique des messages
        if not st.session_state.ai_messages:
            st.session_state.ai_messages = [
                {
                    "role": "assistant", 
                    "content": "ü§ñ Bonjour ! Je suis votre agent IA personnel imoMatch. Je connais le march√© immobilier en temps r√©el et je peux vous aider √† optimiser votre recherche. Que souhaitez-vous savoir ?"
                }
            ]
        
        # Affichage des messages avec design am√©lior√©
        for message in st.session_state.ai_messages:
            if message["role"] == "user":
                st.markdown(f"""
                <div style="background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%); padding: 1rem; border-radius: 10px; margin: 0.5rem 0; margin-left: 2rem;">
                    <strong>üë§ Vous:</strong><br>{message["content"]}
                </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown(f"""
                <div class="ai-chat">
                    <strong>ü§ñ Agent IA:</strong><br>{message["content"]}
                </div>
                """, unsafe_allow_html=True)
        
        # Input utilisateur
        user_input = st.chat_input("Votre message √† l'agent IA...")
        
        if user_input:
            # Ajouter le message utilisateur
            st.session_state.ai_messages.append({"role": "user", "content": user_input})
            
            # G√©n√©rer une r√©ponse IA contextuelle
            ai_response = ai.generate_ai_response(user_input)
            st.session_state.ai_messages.append({"role": "assistant", "content": ai_response})
            
            st.rerun()

elif page == "analytics":
    st.header("üìä Analytics et Intelligence du March√©")
    
    # M√©triques avanc√©es
    metrics_col1, metrics_col2, metrics_col3, metrics_col4 = st.columns(4)
    
    with metrics_col1:
        st.metric("üéØ Taux de match", "23.4%", "1.8%")
    with metrics_col2:
        st.metric("‚è±Ô∏è Temps moyen recherche", "18 jours", "-27%")
    with metrics_col3:
        st.metric("üí¨ Messages re√ßus", "47", "12")
    with metrics_col4:
        st.metric("üìà Score de profil", "94/100", "3")
    
    # Graphiques analytiques avanc√©s
    analytics_tab1, analytics_tab2, analytics_tab3 = st.tabs(["üìà Performance", "üéØ Matching", "üåç March√©"])
    
    with analytics_tab1:
        col1, col2 = st.columns(2)
        
        with col1:
            # √âvolution des vues de profil
            dates = pd.date_range('2024-08-01', periods=30, freq='D')
            vues = np.random.poisson(12, 30) + np.sin(np.arange(30) * 0.2) * 3 + 12
            
            fig = px.line(x=dates, y=vues, title='üìä √âvolution des vues de profil')
            fig.update_traces(line_color='#667eea', line_width=3)
            fig.add_hline(y=np.mean(vues), line_dash="dash", line_color="red", 
                         annotation_text="Moyenne")
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            # Taux de r√©ponse aux contacts
            response_data = pd.DataFrame({
                'Semaine': ['S-4', 'S-3', 'S-2', 'S-1'],
                'Envoy√©s': [12, 15, 18, 22],
                'R√©ponses': [8, 11, 14, 17]
            })
            
            fig = px.bar(response_data, x='Semaine', y=['Envoy√©s', 'R√©ponses'], 
                        title='üìß Messages envoy√©s vs r√©ponses', barmode='group')
            st.plotly_chart(fig, use_container_width=True)
    
    with analytics_tab2:
        col1, col2 = st.columns(2)
        
        with col1:
            # Distribution des scores de matching
            scores = np.random.normal(75, 15, 100)
            scores = np.clip(scores, 0, 100)
            
            fig = px.histogram(x=scores, nbins=20, title='üìä Distribution des scores de matching')
            fig.update_traces(marker_color='#667eea')
            fig.add_vline(x=np.mean(scores), line_dash="dash", line_color="red",
                         annotation_text=f"Moyenne: {np.mean(scores):.1f}%")
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            # Top crit√®res de matching
            criteres_data = pd.DataFrame({
                'Crit√®re': ['Budget', 'Localisation', 'Surface', 'Transport', 'Type bien'],
                'Importance': [95, 88, 82, 76, 71]
            })
            
            fig = px.bar(criteres_data, x='Importance', y='Crit√®re', 
                        title='üéØ Importance des crit√®res', orientation='h')
            fig.update_traces(marker_color='#28a745')
            st.plotly_chart(fig, use_container_width=True)
    
    with analytics_tab3:
        col1, col2 = st.columns(2)
        
        with col1:
            # √âvolution des prix par ville
            dates = pd.date_range('2024-01-01', periods=12, freq='M')
            paris_prices = 9000 + np.cumsum(np.random.normal(20, 50, 12))
            lyon_prices = 5000 + np.cumsum(np.random.normal(10, 30, 12))
            marseille_prices = 4500 + np.cumsum(np.random.normal(15, 25, 12))
            
            villes_data = pd.DataFrame({
                'Mois': dates,
                'Paris': paris_prices,
                'Lyon': lyon_prices,
                'Marseille': marseille_prices
            })
            
            fig = px.line(villes_data, x='Mois', y=['Paris', 'Lyon', 'Marseille'], 
                         title='üí∞ √âvolution prix/m¬≤ par ville')
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            # Temps de vente moyen par type
            temps_vente_data = pd.DataFrame({
                'Type': ['Appartement', 'Maison', 'Studio', 'Loft'],
                'Temps (jours)': [42, 65, 28, 78]
            })
            
            fig = px.bar(temps_vente_data, x='Type', y='Temps (jours)', 
                        title='‚è∞ Temps de vente moyen par type')
            fig.update_traces(marker_color='#fd7e14')
            st.plotly_chart(fig, use_container_width=True)

elif page == "premium":
    st.header("üíé Services Premium - Passez au niveau sup√©rieur")
    
    # Statut premium actuel
    premium_col1, premium_col2 = st.columns([2, 1])
    
    with premium_col1:
        st.markdown("""
        <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 2rem; border-radius: 15px; color: white; margin-bottom: 2rem;">
            <h2 style="margin: 0; color: white;">üöÄ D√©bloquez tout le potentiel d'imoMatch</h2>
            <p style="margin: 0.5rem 0 0 0; font-size: 1.1em;">Acc√©dez aux fonctionnalit√©s avanc√©es et maximisez vos chances de trouver le bien parfait</p>
        </div>
        """, unsafe_allow_html=True)
    
    with premium_col2:
        current_plan = "Gratuit"
        st.markdown(f"""
        <div class="metric-card">
            <h3>üìä Votre plan actuel</h3>
            <h2 style="color: #667eea;">{current_plan}</h2>
            <p>Profil compl√©t√© √† 65%</p>
        </div>
        """, unsafe_allow_html=True)
    
    # Comparaison des plans
    st.subheader("üìã Comparaison des offres")
    
    plans_col1, plans_col2, plans_col3 = st.columns(3)
    
    with plans_col1:
        st.markdown("""
        <div style="background: white; padding: 2rem; border-radius: 15px; border: 2px solid #e0e0e0; text-align: center;">
            <h3>üÜì GRATUIT</h3>
            <h2 style="color: #667eea;">0‚Ç¨</h2>
            <p style="color: #666;">par mois</p>
            
            <div style="text-align: left; margin: 1rem 0;">
                <p>‚úÖ Profil de base</p>
                <p>‚úÖ 5 contacts/mois</p>
                <p>‚úÖ Recherche simple</p>
                <p>‚ùå Recommandations IA</p>
                <p>‚ùå Agent IA personnel</p>
                <p>‚ùå Analytics avanc√©es</p>
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        st.button("üìã Plan actuel", disabled=True, use_container_width=True)
    
    with plans_col2:
        st.markdown("""
        <div style="background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%); padding: 2rem; border-radius: 15px; border: 3px solid #f0a500; text-align: center;">
            <h3>‚≠ê PREMIUM</h3>
            <h2 style="color: #f0a500;">9.90‚Ç¨</h2>
            <p style="color: #666;">par mois</p>
            
            <div style="text-align: left; margin: 1rem 0;">
                <p>‚úÖ Tout du plan gratuit</p>
                <p>‚úÖ Recommandations IA illimit√©es</p>
                <p>‚úÖ Agent IA personnel 24/7</p>
                <p>‚úÖ Analytics d√©taill√©es</p>
                <p>‚úÖ Contacts illimit√©s</p>
                <p>‚úÖ Alertes temps r√©el</p>
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        if st.button("üöÄ Passer √† Premium", use_container_width=True):
            st.balloons()
            st.success("üéâ Simulation : Bienvenue dans Premium !")
            st.session_state.notifications.append("üéâ Upgrade vers Premium r√©alis√© !")
    
    with plans_col3:
        st.markdown("""
        <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 2rem; border-radius: 15px; text-align: center; color: white;">
            <h3 style="color: white;">üëë PROFESSIONNEL</h3>
            <h2 style="color: white;">29.90‚Ç¨</h2>
            <p style="color: #ddd;">par mois</p>
            
            <div style="text-align: left; margin: 1rem 0;">
                <p>‚úÖ Tout du plan Premium</p>
                <p>‚úÖ Gestion par professionnel</p>
                <p>‚úÖ Commission n√©goci√©e</p>
                <p>‚úÖ Accompagnement juridique</p>
                <p>‚úÖ Support d√©di√©</p>
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        if st.button("üëë Devenir Pro", use_container_width=True):
            st.success("üëî Demande envoy√©e ! Un conseiller vous contactera.")

elif page == "marketplace":
    st.header("üè¢ Marketplace des Services Immobiliers")
    
    st.markdown("""
    <div style="background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); padding: 2rem; border-radius: 15px; color: white; margin-bottom: 2rem; text-align: center;">
        <h2 style="margin: 0; color: white;">üåü √âcosyst√®me Complet Immobilier</h2>
        <p style="margin: 0.5rem 0 0 0; font-size: 1.1em;">Tous les professionnels dont vous avez besoin, pr√©-s√©lectionn√©s et not√©s</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Services disponibles
    service_col1, service_col2, service_col3 = st.columns(3)
    
    with service_col1:
        st.markdown("""
        <div class="metric-card">
            <h3>üè¶ Financement</h3>
            <p><strong>3 banques partenaires</strong></p>
            <p>‚Ä¢ Cr√©dit Agricole - 3.85%</p>
            <p>‚Ä¢ BNP Paribas - 4.10%</p>
            <p>‚Ä¢ Courtier imoFinance - 3.75%</p>
        </div>
        """, unsafe_allow_html=True)
        
        if st.button("üè¶ Voir les offres", key="finance", use_container_width=True):
            st.success("üí∞ Redirection vers nos partenaires financiers...")
    
    with service_col2:
        st.markdown("""
        <div class="metric-card">
            <h3>‚öñÔ∏è Juridique</h3>
            <p><strong>25 notaires r√©f√©renc√©s</strong></p>
            <p>‚Ä¢ Me. Dubois - Paris 15e</p>
            <p>‚Ä¢ Me. Martin - Lyon 6e</p>
            <p>‚Ä¢ Conseil juridique inclus</p>
        </div>
        """, unsafe_allow_html=True)
        
        if st.button("‚öñÔ∏è Consulter", key="juridique", use_container_width=True):
            st.success("üìã Mise en relation avec nos juristes...")
    
    with service_col3:
        st.markdown("""
        <div class="metric-card">
            <h3>üîß Expertise</h3>
            <p><strong>15+ diagnostiqueurs</strong></p>
            <p>‚Ä¢ DPE, Termites, Plomb</p>
            <p>‚Ä¢ Expertise structure</p>
            <p>‚Ä¢ Tarifs n√©goci√©s -20%</p>
        </div>
        """, unsafe_allow_html=True)
        
        if st.button("üîß Commander", key="expertise", use_container_width=True):
            st.success("üîç Commande d'expertise en cours...")

elif page == "virtual_tours":
    st.header("üìπ Visites Virtuelles & Immersives")
    
    st.markdown("""
    <div style="background: linear-gradient(135deg, #84fab0 0%, #8fd3f4 100%); padding: 2rem; border-radius: 15px; color: white; margin-bottom: 2rem;">
        <h2 style="margin: 0; color: white;">üé¨ Visitez comme si vous y √©tiez</h2>
        <p style="margin: 0.5rem 0 0 0; font-size: 1.1em;">Technologie VR, visites 360¬∞, et r√©alit√© augment√©e</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Types de visites
    visit_tab1, visit_tab2, visit_tab3 = st.tabs(["üé• Visite 360¬∞", "ü•Ω R√©alit√© Virtuelle", "üì± AR Mobile"])
    
    with visit_tab1:
        st.subheader("üé• Visite Virtuelle 360¬∞")
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            # Simulation d'une visite 360¬∞
            st.markdown("""
            <div style="background: #000; padding: 2rem; border-radius: 15px; text-align: center; color: white;">
                <h3>üè† Appartement 3P - Bastille</h3>
                <div style="background: #333; height: 300px; border-radius: 10px; display: flex; align-items: center; justify-content: center; margin: 1rem 0;">
                    <div>
                        <div style="font-size: 4em;">üìπ</div>
                        <p>Visite 360¬∞ Interactive</p>
                        <p style="font-size: 0.9em; color: #ccc;">Cliquez et glissez pour explorer</p>
                    </div>
                </div>
            </div>
            """, unsafe_allow_html=True)
            
            # Contr√¥les de navigation
            nav_col1, nav_col2, nav_col3, nav_col4 = st.columns(4)
            
            with nav_col1:
                if st.button("üö™ Entr√©e", use_container_width=True):
                    st.info("üìç Navigation vers l'entr√©e")
            with nav_col2:
                if st.button("üõãÔ∏è Salon", use_container_width=True):
                    st.info("üìç Navigation vers le salon")
            with nav_col3:
                if st.button("üç≥ Cuisine", use_container_width=True):
                    st.info("üìç Navigation vers la cuisine")
            with nav_col4:
                if st.button("üõèÔ∏è Chambre", use_container_width=True):
                    st.info("üìç Navigation vers la chambre")
        
        with col2:
            st.markdown("### üéõÔ∏è Outils de visite")
            
            # Outils interactifs
            show_measures = st.checkbox("üìè Afficher les mesures", value=True)
            show_furniture = st.checkbox("ü™ë Meubles virtuels", value=False)
            show_lighting = st.checkbox("üí° √âclairage naturel", value=True)
            time_of_day = st.select_slider("üïê Heure de la journ√©e", 
                                         options=["Matin", "Midi", "Apr√®s-midi", "Soir"], 
                                         value="Apr√®s-midi")
            
            st.divider()
            
            st.markdown("### üìä Informations")
            st.metric("Surface", "75m¬≤")
            st.metric("Pi√®ces", "3")
            st.metric("√âtage", "4/6")
            st.metric("Orientation", "Sud-Ouest")
            
            if st.button("üì§ Partager la visite", use_container_width=True):
                st.success("üîó Lien de partage g√©n√©r√© !")
    
    with visit_tab2:
        st.subheader("ü•Ω Exp√©rience de R√©alit√© Virtuelle")
        
        vr_col1, vr_col2 = st.columns([1, 1])
        
        with vr_col1:
            st.markdown("""
            ### üéÆ Visites VR Immersives
            
            **√âquipements compatibles :**
            - ü•Ω Oculus Quest 2/3
            - üéÆ PlayStation VR
            - üì± Smartphone + Casque VR
            - üíª PC + Casque VR
            
            **Fonctionnalit√©s VR :**
            - üëã Interaction gestuelle
            - üö∂‚Äç‚ôÇÔ∏è D√©placement naturel  
            - üìè Mesures en temps r√©el
            - ü™ë Placement de meubles
            - üé® Changement d√©co en direct
            """)
            
            if st.button("ü•Ω Lancer VR", use_container_width=True):
                st.info("üöÄ Simulation : Ouverture de l'application VR...")
                st.markdown("""
                <div class="ai-chat">
                    <strong>üéÆ Mode VR activ√© !</strong><br>
                    Simulation : Mettez votre casque et utilisez les manettes pour explorer librement l'appartement.
                    <br><br>
                    üí° <em>Astuce: Pointez vers un objet et appuyez sur le trigger pour obtenir des informations.</em>
                </div>
                """, unsafe_allow_html=True)
        
        with vr_col2:
            # Simulation d'interface VR
            st.markdown("""
            <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 2rem; border-radius: 15px; color: white; text-align: center;">
                <h3 style="color: white;">üè† Interface VR</h3>
                
                <div style="background: rgba(255,255,255,0.1); padding: 1rem; border-radius: 10px; margin: 1rem 0;">
                    <h4 style="color: white;">üìç Position actuelle</h4>
                    <p style="color: #ddd;">Salon - Vue vers cuisine</p>
                </div>
                
                <div style="background: rgba(255,255,255,0.1); padding: 1rem; border-radius: 10px; margin: 1rem 0;">
                    <h4 style="color: white;">üéõÔ∏è Contr√¥les</h4>
                    <div style="display: flex; justify-content: space-around; color: #ddd;">
                        <div>üéÆ D√©placer</div>
                        <div>üëÜ S√©lectionner</div>
                        <div>üìè Mesurer</div>
                    </div>
                </div>
                
                <div style="background: rgba(255,255,255,0.1); padding: 1rem; border-radius: 10px;">
                    <h4 style="color: white;">‚ÑπÔ∏è Objet s√©lectionn√©</h4>
                    <p style="color: #ddd;">Fen√™tre principale<br>Dimensions: 1.2m x 1.8m<br>Orientation: Sud</p>
                </div>
            </div>
            """, unsafe_allow_html=True)
    
    with visit_tab3:
        st.subheader("üì± R√©alit√© Augment√©e Mobile")
        
        ar_col1, ar_col2 = st.columns([2, 1])
        
        with ar_col1:
            st.markdown("""
            ### üì≤ Application imoMatch AR
            
            Scannez le QR code ci-dessous avec votre smartphone pour lancer l'exp√©rience AR :
            """)
            
            # QR Code simul√©
            st.markdown("""
            <div style="background: white; padding: 2rem; border-radius: 15px; text-align: center; border: 2px solid #667eea;">
                <div style="font-size: 8em;">üì±</div>
                <h3>QR Code AR</h3>
                <p style="color: #666;">Pointez votre cam√©ra ici</p>
                <p style="font-size: 0.9em; color: #999;">Compatible iOS 12+ et Android 8+</p>
            </div>
            """, unsafe_allow_html=True)
            
            st.markdown("""
            **Fonctionnalit√©s AR :**
            - üìê Mesures pr√©cises avec la cam√©ra
            - ü™ë Placement virtuel de meubles
            - üé® Test de couleurs murales
            - üí° Simulation d'√©clairage
            - üì∑ Capture photo/vid√©o annot√©e
            """)
        
        with ar_col2:
            st.markdown("### üîß Outils AR")
            
            # Outils AR
            ar_tool = st.selectbox("Outil s√©lectionn√©", [
                "üìè M√®tre laser",
                "ü™ë Placement mobilier", 
                "üé® Peinture murale",
                "üí° √âclairage",
                "üì∑ Annotation"
            ])
            
            if ar_tool == "üìè M√®tre laser":
                st.info("üìè Pointez deux endroits pour mesurer la distance")
            elif ar_tool == "ü™ë Placement mobilier":
                furniture = st.selectbox("Meuble", ["Canap√©", "Table", "Lit", "Armoire"])
                st.info(f"ü™ë Glissez pour placer le {furniture.lower()}")
            elif ar_tool == "üé® Peinture murale":
                color = st.color_picker("Couleur", "#FF6B6B")
                st.info("üé® Touchez un mur pour appliquer la couleur")
    
    # Galerie de visites disponibles
    st.subheader("üé¨ Galerie des Visites Virtuelles")
    
    # Liste des biens avec visites virtuelles
    visites_disponibles = [
        {
            "titre": "Appartement 3P - Bastille",
            "type": "Appartement",
            "prix": "485k‚Ç¨",
            "visites": ["360¬∞", "VR", "AR"],
            "vues": 1247,
            "note": 4.8,
            "duree": "12 min"
        },
        {
            "titre": "Maison 5P - Vincennes", 
            "type": "Maison",
            "prix": "680k‚Ç¨",
            "visites": ["360¬∞", "AR"],
            "vues": 892,
            "note": 4.6,
            "duree": "18 min"
        },
        {
            "titre": "Loft 2P - R√©publique",
            "type": "Loft", 
            "prix": "520k‚Ç¨",
            "visites": ["360¬∞", "VR"],
            "vues": 654,
            "note": 4.7,
            "duree": "8 min"
        }
    ]
    
    gallery_col1, gallery_col2 = st.columns([3, 1])
    
    with gallery_col2:
        st.markdown("### üîç Filtres")
        filter_type = st.multiselect("Type de bien", ["Appartement", "Maison", "Studio", "Loft"], default=["Appartement", "Maison", "Loft"])
        filter_visit_type = st.multiselect("Type de visite", ["360¬∞", "VR", "AR"], default=["360¬∞", "VR", "AR"])
        sort_by = st.selectbox("Trier par", ["Plus populaires", "Plus r√©centes", "Mieux not√©es", "Prix croissant"])
    
    with gallery_col1:
        # Affichage des visites filtr√©es
        for visite in visites_disponibles:
            if (visite['type'] in filter_type and 
                any(v in filter_visit_type for v in visite['visites'])):
                
                st.markdown(f"""
                <div class="property-card">
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <div>
                            <h4 style="margin: 0; color: #667eea;">{visite['titre']}</h4>
                            <p style="margin: 0.2rem 0; color: #666;">{visite['type']} ‚Ä¢ {visite['prix']} ‚Ä¢ ‚è±Ô∏è {visite['duree']}</p>
                        </div>
                        <div style="text-align: right;">
                            <div style="font-size: 1.2em; font-weight: bold;">‚≠ê {visite['note']}</div>
                            <div style="font-size: 0.9em; color: #666;">üëÅÔ∏è {visite['vues']} vues</div>
                        </div>
                    </div>
                </div>
                """, unsafe_allow_html=True)
                
                # Boutons de visite
                visit_col1, visit_col2, visit_col3, visit_col4 = st.columns(4)
                
                with visit_col1:
                    if "360¬∞" in visite['visites']:
                        if st.button(f"üé• Visite 360¬∞", key=f"360_{visite['titre']}"):
                            st.success("üé¨ Lancement de la visite 360¬∞...")
                    else:
                        st.button("üé• 360¬∞ (N/A)", disabled=True)
                
                with visit_col2:
                    if "VR" in visite['visites']:
                        if st.button(f"ü•Ω Mode VR", key=f"vr_{visite['titre']}"):
                            st.info("üöÄ Pr√©paration de l'exp√©rience VR...")
                    else:
                        st.button("ü•Ω VR (N/A)", disabled=True)
                
                with visit_col3:
                    if "AR" in visite['visites']:
                        if st.button(f"üì± AR Mobile", key=f"ar_{visite['titre']}"):
                            st.info("üì≤ Ouverture de l'app mobile...")
                    else:
                        st.button("üì± AR (N/A)", disabled=True)
                
                with visit_col4:
                    if st.button(f"‚ù§Ô∏è Favoris", key=f"fav_vt_{visite['titre']}"):
                        st.success("üíñ Ajout√© aux favoris !")
                        st.session_state.notifications.append(f"‚ù§Ô∏è {visite['titre']} ajout√© aux favoris")
                
                st.divider()

# Section footer avec statistiques et contact
st.markdown("---")

footer_col1, footer_col2, footer_col3 = st.columns(3)

with footer_col1:
    st.markdown("""
    ### üìä Statistiques Plateforme
    
    - üë• **15,247** utilisateurs actifs
    - üè† **3,891** biens r√©f√©renc√©s  
    - üéØ **2,156** matches r√©alis√©s
    - ‚≠ê **4.8/5** satisfaction moyenne
    """)

with footer_col2:
    st.markdown("""
    ### ü§ù Nos Partenaires
    
    - üè¶ **25** banques partenaires
    - ‚öñÔ∏è **150** notaires r√©f√©renc√©s
    - üè¢ **89** agences immobili√®res
    - üîß **200+** professionnels certifi√©s
    """)

with footer_col3:
    st.markdown("""
    ### üìû Support & Contact
    
    - üí¨ **Chat IA 24/7** 
    - üìß support@imomatch.com
    - üì± +33 6 74 55 44 32
    - üïê Support : Lun-Ven 9h-18h
    """)

# Footer principal avec informations sur le fondateur
st.markdown("""
<div style="text-align: center; padding: 3rem; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 15px; margin-top: 3rem; color: white;">
    <h2 style="color: white; margin: 0;">üè† imoMatch - La r√©volution immobili√®re par l'IA</h2>
    <p style="font-size: 1.2em; margin: 1rem 0; color: #ddd;">Un Demandeur, Un Logement, Une Vente</p>
    
    <div style="background: rgba(255,255,255,0.1); padding: 2rem; border-radius: 10px; margin: 2rem 0;">
        <h3 style="color: white;">üë®‚Äçüíª Yann Gouedo - Fondateur</h3>
        <p style="color: #ddd; font-style: italic; font-size: 1.1em;">
        "Ma motivation quotidienne est d'aider les citoyens et les entreprises √† optimiser leur prise de d√©cision gr√¢ce √† l'intelligence artificielle, et ainsi les rendre plus efficaces."
        </p>
        <p style="color: #ddd;">
        <strong>üìß Contact :</strong> +33 6 74 55 44 32 | yann@imomatch.com<br>
        <strong>üíº Profil :</strong> Ing√©nieur en Math√©matiques Appliqu√©es, Expert Data Science & IA
        </p>
    </div>
    
    <div style="display: flex; justify-content: center; gap: 2rem; flex-wrap: wrap; margin-top: 2rem;">
        <div style="background: rgba(255,255,255,0.1); padding: 1rem; border-radius: 8px;">
            <strong>üéØ Mission</strong><br>
            D√©mocratiser l'immobilier par l'IA
        </div>
        <div style="background: rgba(255,255,255,0.1); padding: 1rem; border-radius: 8px;">
            <strong>üöÄ Vision</strong><br>
            L'UBER de l'immobilier
        </div>
        <div style="background: rgba(255,255,255,0.1); padding: 1rem; border-radius: 8px;">
            <strong>üí° Innovation</strong><br>
            Data Science & IA appliqu√©es
        </div>
    </div>
    
    <p style="margin-top: 2rem; font-size: 0.9em; color: #bbb;">
        ¬© 2024 imoMatch - Tous droits r√©serv√©s | Version MVP 1.0 - Compatible Streamlit Cloud
    </p>
</div>
""", unsafe_allow_html=True)

# Message de bienvenue pour les nouveaux utilisateurs
if st.session_state.user and len(st.session_state.notifications) == 0:
    st.session_state.notifications.append("üéâ Bienvenue sur imoMatch ! Compl√©tez votre profil pour des recommandations personnalis√©es.")
