"""
Page de profil utilisateur pour ImoMatch
"""
import streamlit as st
import plotly.express as px
import pandas as pd
from datetime import datetime, timedelta
import logging

from config.settings import PLANS, COLORS, PROPERTY_TYPES, VALIDATION_RULES
from database.manager import get_database
from auth.authentication import auth_manager, get_current_user
from ui.components import create_metric_card, create_radar_chart, create_favorites_widget
from utils.helpers import format_currency, format_date

logger = logging.getLogger(__name__)

def render():
    """Rend la page de profil utilisateur"""
    user = get_current_user()
    if not user:
        st.error("Vous devez √™tre connect√© pour acc√©der √† cette page")
        return
    
    st.markdown("# üë§ Mon Profil")
    
    # Tabs pour organiser le contenu
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üìù Informations", 
        "üéØ Pr√©f√©rences", 
        "üí≥ Abonnement", 
        "‚ù§Ô∏è Favoris",
        "‚öôÔ∏è Param√®tres"
    ])
    
    with tab1:
        _render_user_info(user)
    
    with tab2:
        _render_preferences(user)
    
    with tab3:
        _render_subscription(user)
    
    with tab4:
        _render_favorites(user)
    
    with tab5:
        _render_settings(user)

def _render_user_info(user):
    """Section informations personnelles"""
    st.markdown("## üìã Informations Personnelles")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        # Formulaire de mise √† jour
        with st.form("update_profile"):
            st.markdown("### ‚úèÔ∏è Modifier mes informations")
            
            first_name = st.text_input(
                "Pr√©nom",
                value=user.get('first_name', ''),
                placeholder="Votre pr√©nom"
            )
            
            last_name = st.text_input(
                "Nom",
                value=user.get('last_name', ''),
                placeholder="Votre nom"
            )
            
            email = st.text_input(
                "Email",
                value=user.get('email', ''),
                placeholder="votre.email@example.com",
                help="L'email sert pour la connexion"
            )
            
            phone = st.text_input(
                "T√©l√©phone",
                value=user.get('phone', '') if user.get('phone') else '',
                placeholder="+33 6 12 34 56 78"
            )
            
            col_age, col_prof = st.columns(2)
            
            with col_age:
                age = st.number_input(
                    "√Çge",
                    min_value=VALIDATION_RULES['age']['min'],
                    max_value=VALIDATION_RULES['age']['max'],
                    value=user.get('age', 25) if user.get('age') else 25,
                    step=1
                )
            
            with col_prof:
                profession = st.text_input(
                    "Profession",
                    value=user.get('profession', '') if user.get('profession') else '',
                    placeholder="Votre profession"
                )
            
            if st.form_submit_button("üíæ Sauvegarder", type="primary", use_container_width=True):
                updates = {
                    'first_name': first_name,
                    'last_name': last_name,
                    'email': email,
                    'phone': phone if phone else None,
                    'age': age,
                    'profession': profession if profession else None
                }
                
                success, message = auth_manager.update_profile(updates)
                if success:
                    st.success(message)
                    st.rerun()
                else:
                    st.error(message)
    
    with col2:
        # Informations du compte
        st.markdown("### üìä Informations du Compte")
        
        # Carte de profil
        st.markdown(f"""
        <div style="
            background: linear-gradient(135deg, {COLORS['primary']}, {COLORS['secondary']});
            color: white;
            padding: 1.5rem;
            border-radius: 15px;
            text-align: center;
            margin-bottom: 1rem;
        ">
            <div style="font-size: 3rem; margin-bottom: 0.5rem;">üë§</div>
            <h3 style="margin: 0.5rem 0;">{user['first_name']} {user['last_name']}</h3>
            <p style="margin: 0; opacity: 0.9;">{user['email']}</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Statistiques du compte
        st.markdown("#### üìà Statistiques")
        
        member_since = format_date(user.get('created_at', ''), 'long')
        st.info(f"**Membre depuis:** {member_since}")
        
        # Plan actuel
        current_plan = PLANS.get(user.get('plan', 'free'), PLANS['free'])
        plan_color = COLORS['success'] if user.get('plan') == 'free' else COLORS['primary']
        
        st.markdown(f"""
        <div style="
            background: {plan_color}15;
            border: 2px solid {plan_color};
            border-radius: 10px;
            padding: 1rem;
            margin: 1rem 0;
        ">
            <h4 style="margin: 0 0 0.5rem 0; color: {plan_color};">Plan Actuel</h4>
            <p style="margin: 0; font-size: 1.1rem; font-weight: bold;">{current_plan['name']}</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Activit√© r√©cente
        try:
            _render_user_activity_summary(user)
        except Exception as e:
            logger.error(f"Erreur activit√© utilisateur: {e}")

def _render_preferences(user):
    """Section pr√©f√©rences de recherche"""
    st.markdown("## üéØ Mes Pr√©f√©rences de Recherche")
    
    db = get_database()
    current_prefs = db.get_user_preferences(user['id']) or {}
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        with st.form("update_preferences"):
            st.markdown("### üîç Crit√®res de Recherche")
            
            # Budget
            st.markdown("#### üí∞ Budget")
            col_min, col_max = st.columns(2)
            
            with col_min:
                budget_min = st.number_input(
                    "Budget minimum (‚Ç¨)",
                    min_value=VALIDATION_RULES['price']['min'],
                    max_value=VALIDATION_RULES['price']['max'],
                    value=current_prefs.get('budget_min', 200000),
                    step=25000,
                    format="%d"
                )
            
            with col_max:
                budget_max = st.number_input(
                    "Budget maximum (‚Ç¨)",
                    min_value=VALIDATION_RULES['price']['min'],
                    max_value=VALIDATION_RULES['price']['max'],
                    value=current_prefs.get('budget_max', 500000),
                    step=25000,
                    format="%d"
                )
            
            # Type de propri√©t√©
            property_type = st.selectbox(
                "Type de bien pr√©f√©r√©",
                options=["Aucune pr√©f√©rence"] + PROPERTY_TYPES,
                index=0 if not current_prefs.get('property_type') else 
                      PROPERTY_TYPES.index(current_prefs['property_type']) + 1
            )
            
            # Caract√©ristiques
            st.markdown("#### üè† Caract√©ristiques")
            col_bed, col_bath, col_surf = st.columns(3)
            
            with col_bed:
                bedrooms = st.number_input(
                    "Chambres (min)",
                    min_value=0,
                    max_value=10,
                    value=current_prefs.get('bedrooms', 2),
                    step=1
                )
            
            with col_bath:
                bathrooms = st.number_input(
                    "Salles de bain (min)",
                    min_value=0,
                    max_value=5,
                    value=current_prefs.get('bathrooms', 1),
                    step=1
                )
            
            with col_surf:
                surface_min = st.number_input(
                    "Surface min (m¬≤)",
                    min_value=10,
                    max_value=1000,
                    value=current_prefs.get('surface_min', 70),
                    step=10
                )
            
            # Localisation
            location = st.text_input(
                "Localisation pr√©f√©r√©e",
                value=current_prefs.get('location', ''),
                placeholder="Ex: Antibes, Cannes, Nice..."
            )
            
            # Crit√®res avanc√©s pour utilisateurs premium
            if auth_manager.can_access_feature('advanced_search'):
                st.markdown("#### ‚≠ê Crit√®res Avanc√©s (Premium)")
                
                advanced_criteria = current_prefs.get('criteria', {})
                
                col1_adv, col2_adv = st.columns(2)
                
                with col1_adv:
                    has_garage = st.checkbox(
                        "Garage souhait√©", 
                        value=advanced_criteria.get('has_garage', False)
                    )
                    has_garden = st.checkbox(
                        "Jardin souhait√©",
                        value=advanced_criteria.get('has_garden', False)
                    )
                    has_pool = st.checkbox(
                        "Piscine souhait√©e",
                        value=advanced_criteria.get('has_pool', False)
                    )
                
                with col2_adv:
                    has_balcony = st.checkbox(
                        "Balcon/Terrasse",
                        value=advanced_criteria.get('has_balcony', False)
                    )
                    furnished = st.checkbox(
                        "Meubl√© pr√©f√©r√©",
                        value=advanced_criteria.get('furnished', False)
                    )
                    elevator = st.checkbox(
                        "Ascenseur requis",
                        value=advanced_criteria.get('elevator', False)
                    )
            
            if st.form_submit_button("üíæ Sauvegarder les Pr√©f√©rences", type="primary", use_container_width=True):
                preferences = {
                    'budget_min': budget_min,
                    'budget_max': budget_max,
                    'property_type': property_type if property_type != "Aucune pr√©f√©rence" else None,
                    'bedrooms': bedrooms,
                    'bathrooms': bathrooms,
                    'surface_min': surface_min,
                    'location': location if location else None
                }
                
                # Ajouter crit√®res avanc√©s si disponibles
                if auth_manager.can_access_feature('advanced_search'):
                    preferences['criteria'] = {
                        'has_garage': has_garage,
                        'has_garden': has_garden,
                        'has_pool': has_pool,
                        'has_balcony': has_balcony,
                        'furnished': furnished,
                        'elevator': elevator
                    }
                
                if db.save_user_preferences(user['id'], preferences):
                    st.success("Pr√©f√©rences sauvegard√©es avec succ√®s !")
                    st.rerun()
                else:
                    st.error("Erreur lors de la sauvegarde")
    
    with col2:
        # Visualisation des pr√©f√©rences actuelles
        if current_prefs:
            st.markdown("### üìä Aper√ßu de vos Pr√©f√©rences")
            
            # Graphique radar des crit√®res
            criteria_scores = {
                'Budget': 0.8,
                'Localisation': 0.9 if current_prefs.get('location') else 0.3,
                'Taille': min(1.0, (current_prefs.get('surface_min', 0) / 200)),
                'Chambres': min(1.0, (current_prefs.get('bedrooms', 0) / 5)),
                'Type': 0.8 if current_prefs.get('property_type') else 0.5
            }
            
            create_radar_chart(criteria_scores, "Profil de Recherche")
            
            # R√©sum√© des pr√©f√©rences
            st.markdown("#### üìã R√©sum√©")
            prefs_summary = []
            
            if current_prefs.get('budget_min') and current_prefs.get('budget_max'):
                prefs_summary.append(f"üí∞ {format_currency(current_prefs['budget_min'])} - {format_currency(current_prefs['budget_max'])}")
            
            if current_prefs.get('property_type'):
                prefs_summary.append(f"üè† {current_prefs['property_type']}")
            
            if current_prefs.get('location'):
                prefs_summary.append(f"üìç {current_prefs['location']}")
            
            if current_prefs.get('surface_min'):
                prefs_summary.append(f"üìê Min {current_prefs['surface_min']}m¬≤")
            
            for item in prefs_summary:
                st.write(f"‚Ä¢ {item}")

def _render_subscription(user):
    """Section gestion de l'abonnement"""
    st.markdown("## üí≥ Mon Abonnement")
    
    current_plan = user.get('plan', 'free')
    plan_info = PLANS.get(current_plan, PLANS['free'])
    
    # Plan actuel
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("### üìã Plan Actuel")
        
        plan_color = COLORS['success'] if current_plan == 'free' else COLORS['primary']
        
        st.markdown(f"""
        <div style="
            background: {plan_color}15;
            border: 2px solid {plan_color};
            border-radius: 15px;
            padding: 2rem;
            margin: 1rem 0;
        ">
            <h2 style="margin: 0 0 1rem 0; color: {plan_color};">{plan_info['name']}</h2>
            <p style="font-size: 1.5rem; margin: 0 0 1rem 0; color: {plan_color}; font-weight: bold;">
                {plan_info['price']}‚Ç¨/mois
            </p>
            <div style="color: #666;">
                {"<br>".join([f"‚úÖ {feature}" for feature in plan_info['features']])}
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        # Utilisation mensuelle
        if current_plan == 'free':
            searches_used = user.get('searches_this_month', 0)
            max_searches = plan_info['searches_per_month']
            
            progress = searches_used / max_searches if max_searches > 0 else 0
            
            st.markdown("#### üìä Utilisation ce Mois")
            st.progress(progress)
            st.write(f"**Recherches:** {searches_used}/{max_searches}")
            
            if searches_used >= max_searches * 0.8:
                st.warning("‚ö†Ô∏è Vous approchez de la limite mensuelle !")
    
    with col2:
        st.markdown("### üöÄ Passer au Niveau Sup√©rieur")
        
        # Afficher les autres plans
        for plan_key, plan_data in PLANS.items():
            if plan_key != current_plan:
                
                color = COLORS['primary'] if plan_key == 'premium' else COLORS['secondary']
                
                st.markdown(f"""
                <div style="
                    border: 1px solid {color};
                    border-radius: 10px;
                    padding: 1rem;
                    margin: 1rem 0;
                    text-align: center;
                ">
                    <h4 style="color: {color}; margin: 0 0 0.5rem 0;">{plan_data['name']}</h4>
                    <p style="font-size: 1.2rem; font-weight: bold; margin: 0 0 0.5rem 0;">{plan_data['price']}‚Ç¨/mois</p>
                    <small style="color: #666;">{"<br>".join(plan_data['features'][:3])}</small>
                </div>
                """, unsafe_allow_html=True)
                
                if st.button(f"‚¨ÜÔ∏è Passer au {plan_data['name']}", key=f"upgrade_{plan_key}", use_container_width=True):
                    success, message = auth_manager.upgrade_plan(plan_key)
                    if success:
                        st.success(message)
                        st.rerun()
                    else:
                        st.error(message)
    
    # Historique de facturation (simul√©)
    if current_plan != 'free':
        st.markdown("---")
        st.markdown("### üìã Historique de Facturation")
        
        # Donn√©es simul√©es
        billing_data = [
            {'date': '2024-01-01', 'plan': plan_info['name'], 'montant': plan_info['price'], 'statut': 'Pay√©'},
            {'date': '2023-12-01', 'plan': plan_info['name'], 'montant': plan_info['price'], 'statut': 'Pay√©'},
            {'date': '2023-11-01', 'plan': plan_info['name'], 'montant': plan_info['price'], 'statut': 'Pay√©'},
        ]
        
        df = pd.DataFrame(billing_data)
        df['Date'] = pd.to_datetime(df['date']).dt.strftime('%d/%m/%Y')
        
        st.dataframe(
            df[['Date', 'plan', 'montant', 'statut']],
            column_config={
                'Date': 'Date',
                'plan': 'Plan',
                'montant': st.column_config.NumberColumn('Montant (‚Ç¨)', format='%d ‚Ç¨'),
                'statut': 'Statut'
            },
            hide_index=True,
            use_container_width=True
        )

def _render_favorites(user):
    """Section favoris"""
    st.markdown("## ‚ù§Ô∏è Mes Propri√©t√©s Favorites")
    
    create_favorites_widget()
    
    # Statistiques des favoris
    try:
        db = get_database()
        favorites = db.get_user_favorites(user['id'])
        
        if favorites:
            st.markdown("### üìä Analyse de mes Favoris")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                avg_price = sum(fav['price'] for fav in favorites) / len(favorites)
                create_metric_card("Prix Moyen", format_currency(avg_price), "üí∞")
            
            with col2:
                if any(fav.get('surface') for fav in favorites):
                    avg_surface = sum(fav.get('surface', 0) for fav in favorites if fav.get('surface')) / len([f for f in favorites if f.get('surface')])
                    create_metric_card("Surface Moyenne", f"{avg_surface:.0f}m¬≤", "üìê")
            
            with col3:
                create_metric_card("Total Favoris", str(len(favorites)), "‚ù§Ô∏è")
            
            # R√©partition par type
            if len(favorites) > 1:
                type_counts = {}
                for fav in favorites:
                    prop_type = fav['property_type']
                    type_counts[prop_type] = type_counts.get(prop_type, 0) + 1
                
                fig = px.pie(
                    values=list(type_counts.values()),
                    names=list(type_counts.keys()),
                    title="R√©partition de vos Favoris par Type"
                )
                st.plotly_chart(fig, use_container_width=True)
    
    except Exception as e:
        logger.error(f"Erreur analyse favoris: {e}")

def _render_settings(user):
    """Section param√®tres"""
    st.markdown("## ‚öôÔ∏è Param√®tres du Compte")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### üîí S√©curit√©")
        
        # Changement de mot de passe
        with st.expander("üîë Changer le Mot de Passe"):
            with st.form("change_password"):
                current_password = st.text_input("Mot de passe actuel", type="password")
                new_password = st.text_input("Nouveau mot de passe", type="password")
                confirm_password = st.text_input("Confirmer le nouveau mot de passe", type="password")
                
                if st.form_submit_button("üîí Changer le Mot de Passe"):
                    success, message = auth_manager.change_password(
                        current_password, new_password, confirm_password
                    )
                    if success:
                        st.success(message)
                    else:
                        st.error(message)
        
        # Export des donn√©es
        st.markdown("### üì• Mes Donn√©es")
        
        if st.button("üìä Exporter mes Donn√©es (RGPD)", use_container_width=True):
            from utils.helpers import export_user_data
            data = export_user_data(user['id'])
            if data:
                st.download_button(
                    label="üíæ T√©l√©charger mes donn√©es",
                    data=json.dumps(data, indent=2, ensure_ascii=False),
                    file_name=f"imomatch_data_{user['id']}_{datetime.now().strftime('%Y%m%d')}.json",
                    mime="application/json"
                )
                st.success("Donn√©es export√©es avec succ√®s !")
            else:
                st.error("Erreur lors de l'export")
    
    with col2:
        st.markdown("### üé® Pr√©f√©rences d'Interface")
        
        # Th√®me (placeholder pour future impl√©mentation)
        theme = st.selectbox(
            "Th√®me",
            options=["Clair", "Sombre", "Auto"],
            index=0,
            help="Le th√®me sombre sera disponible prochainement"
        )
        
        # Langue
        language = st.selectbox(
            "Langue",
            options=["Fran√ßais", "English"],
            index=0,
            help="Support multilingue √† venir"
        )
        
        # Notifications
        st.markdown("### üîî Notifications")
        
        email_notifications = st.checkbox("Notifications par email", value=True)
        search_alerts = st.checkbox("Alertes de nouvelles propri√©t√©s", value=False)
        newsletter = st.checkbox("Newsletter mensuelle", value=False)
        
        if st.button("üíæ Sauvegarder les Pr√©f√©rences", use_container_width=True):
            st.success("Pr√©f√©rences sauvegard√©es !")
        
        # Zone dangereuse
        st.markdown("---")
        st.markdown("### ‚ö†Ô∏è Zone Dangereuse")
        
        with st.expander("üóëÔ∏è Supprimer mon Compte", expanded=False):
            st.error("‚ö†Ô∏è Cette action est irr√©versible !")
            st.write("Toutes vos donn√©es seront d√©finitivement supprim√©es.")
            
            confirm_deletion = st.text_input(
                "Tapez 'SUPPRIMER' pour confirmer",
                placeholder="SUPPRIMER"
            )
            
            if st.button("üóëÔ∏è Supprimer D√©finitivement", type="primary"):
                if confirm_deletion == "SUPPRIMER":
                    st.error("Fonctionnalit√© de suppression √† impl√©menter")
                else:
                    st.warning("Veuillez taper 'SUPPRIMER' pour confirmer")

def _render_user_activity_summary(user):
    """Affiche un r√©sum√© de l'activit√© utilisateur"""
    st.markdown("#### üìà Activit√© R√©cente")
    
    try:
        db = get_database()
        
        # Compter les favoris
        favorites_count = len(db.get_user_favorites(user['id']))
        
        # Compter les recherches sauvegard√©es
        saved_searches_count = len(db.get_saved_searches(user['id']))
        
        # Afficher les m√©triques
        col1, col2 = st.columns(2)
        
        with col1:
            st.metric("Favoris", favorites_count)
        
        with col2:
            st.metric("Recherches", saved_searches_count)
        
        # Derni√®re activit√©
        last_update = format_date(user.get('updated_at', ''), 'relative')
        st.caption(f"Derni√®re activit√©: {last_update}")
        
    except Exception as e:
        logger.error(f"Erreur r√©sum√© activit√©: {e}")
        st.caption("Impossible de charger l'activit√©")
